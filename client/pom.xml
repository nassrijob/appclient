<?xml version="1.0" encoding="UTF-8"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>appclient</artifactId>
		<groupId>se.redhat.demo</groupId>
		<version>1.0.0-SNAPSHOT</version>
	</parent>
	<groupId>se.redhat.demo.appclient</groupId>
	<artifactId>client</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<repositories>
		<repository>
			<id>JBOSS_NEXUS</id>
			<url>http://repository.jboss.org/nexus/content/groups/public</url>
		</repository>
	</repositories>
	<build>
		<finalName>appclient-client</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<!-- Add the maven exec plugin to allow us to run a java program via maven -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<executions>
					<execution>
						<goals>
							<goal>exec</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<executable>java</executable>
					<workingDirectory>${project.build.directory}/exec-working-directory</workingDirectory>
					<arguments>
						<!-- automatically creates the classpath using all project dependencies, 
							also adding the project build directory -->
						<argument>-classpath</argument>
						<classpath>
						</classpath>
						<argument>se.redhat.demo.appclient.Main</argument>
						<argument>This is an example String that the server will calculate the MD5 checksum for</argument>
					</arguments>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencyManagement>
		<dependencies>
			<!-- Define the version of JBoss' Java EE 6 APIs we want to use -->
			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill 
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
				of artifacts. We use this here so that we always get the correct versions 
				of artifacts. Here we use the jboss-javaee-web-6.0 stack (you can read this 
				as the JBoss stack of the Java EE 6 Web Profile APIs), and we use version 
				2.0.0.Beta1 which is the latest release of the stack. You can actually use 
				this stack with any version of JBoss AS that implements Java EE 6, not just 
				JBoss AS 7! -->
			<dependency>
				<groupId>org.jboss.spec</groupId>
				<artifactId>jboss-javaee-web-6.0</artifactId>
				<version>2.0.0.Final</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>se.redhat.demo.appclient</groupId>
			<artifactId>server</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>

		<!-- The following dependencies are need for running the client, not for 
			compiling -->
		<dependency>
			<groupId>org.jboss.spec.javax.transaction</groupId>
			<artifactId>jboss-transaction-api_1.1_spec</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- Import the EJB 3.1 API, we use runtime scope because we aren't using 
			any direct reference to EJB spec API in our client code -->
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.1_spec</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- JBoss EJB client API jar. We use runtime scope because the EJB client 
			API isn't directly used in this example. We just need it in our runtime classpath -->
		<dependency>
			<groupId>org.jboss</groupId>
			<artifactId>jboss-ejb-client</artifactId>
			<version>1.0.0.Beta9</version>
			<scope>runtime</scope>
		</dependency>

		<!-- client communications with the server use XNIO -->
		<dependency>
			<groupId>org.jboss.xnio</groupId>
			<artifactId>xnio-api</artifactId>
			<version>3.0.0.CR5</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.xnio</groupId>
			<artifactId>xnio-nio</artifactId>
			<version>3.0.0.CR5</version>
			<scope>runtime</scope>
		</dependency>

		<!-- The client needs JBoss remoting to access the server -->
		<dependency>
			<groupId>org.jboss.remoting3</groupId>
			<artifactId>jboss-remoting</artifactId>
			<version>3.2.0.CR6</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Remote EJB accesses can be secured -->
		<dependency>
			<groupId>org.jboss.sasl</groupId>
			<artifactId>jboss-sasl</artifactId>
			<version>1.0.0.Beta9</version>
		</dependency>

		<!-- data serialization for invoking remote EJBs -->
		<dependency>
			<groupId>org.jboss.marshalling</groupId>
			<artifactId>jboss-marshalling-river</artifactId>
			<version>1.3.0.GA</version>
			<scope>runtime</scope>
		</dependency>


	</dependencies>
</project>
